AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Simple API Gateway with WAF and Lambda backend

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Resources:
  # API Gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'https://api-getway-nine.vercel.app'"

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Environment}-api-user-pool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true

  # Cognito App Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${Environment}-api-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days

  # WAF Web ACL
  ApiWafWebAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub ${Environment}-api-web-acl
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      Rules:
        - Name: RateLimit
          Priority: 1
          Action:
            Block: {}
          Statement:
            RateBasedStatement:
              Limit: 10
              AggregateKeyType: IP
              EvaluationWindowSec: 60
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: ApiWafWebAcl

  # DynamoDB Tables
  TodosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-todos
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-notes
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Functions
  TodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/todos/
      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TodosTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodosTable
      Events:
        GetTodos:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /todos
            Method: GET
        GetTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /todos/{id}
            Method: GET
        CreateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /todos
            Method: POST
        UpdateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /todos/{id}
            Method: PUT
        DeleteTodo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /todos/{id}
            Method: DELETE

  NotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/notes/
      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          TABLE_NAME: !Ref NotesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
      Events:
        GetNotes:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /notes
            Method: GET
        GetNote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /notes/{id}
            Method: GET
        CreateNote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /notes
            Method: POST
        UpdateNote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /notes/{id}
            Method: PUT
        DeleteNote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /notes/{id}
            Method: DELETE

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito App Client ID
    Value: !Ref UserPoolClient
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
  TodosTableName:
    Description: DynamoDB table for todos
    Value: !Ref TodosTable
  NotesTableName:
    Description: DynamoDB table for notes
    Value: !Ref NotesTable
